import { wrap } from 'comlink';
import { ViewKey, Address, PrivateKeyCiphertext, PrivateKey, RecordCiphertext, Program, Transaction, ProvingKey, VerifyingKey, ProgramManager as ProgramManager$1, RecordPlaintext } from '@aleohq/wasm';
export { Address, ExecutionResponse, PrivateKey, PrivateKeyCiphertext, Program, ProgramManager as ProgramManagerBase, ProvingKey, RecordCiphertext, RecordPlaintext, Signature, VerifyingKey, ViewKey, Transaction as WasmTransaction, initThreadPool, verifyFunctionExecution } from '@aleohq/wasm';

/**
 * Key Management class. Enables the creation of a new Aleo Account, importation of an existing account from
 * an existing private key or seed, and message signing and verification functionality.
 *
 * An Aleo Account is generated from a randomly generated seed (number) from which an account private key, view key,
 * and a public account address are derived. The private key lies at the root of an Aleo account. It is a highly
 * sensitive secret and should be protected as it allows for creation of Aleo Program executions and arbitrary value
 * transfers. The View Key allows for decryption of a user's activity on the blockchain. The Address is the public
 * address to which other users of Aleo can send Aleo credits and other records to. This class should only be used
 * environments where the safety of the underlying key material can be assured.
 *
 * @example
 * // Create a new account
 * const myRandomAccount = new Account();
 *
 * // Create an account from a randomly generated seed
 * const seed = new Uint8Array([94, 91, 52, 251, 240, 230, 226, 35, 117, 253, 224, 210, 175, 13, 205, 120, 155, 214, 7, 169, 66, 62, 206, 50, 188, 40, 29, 122, 40, 250, 54, 18]);
 * const mySeededAccount = new Account({seed: seed});
 *
 * // Create an account from an existing private key
 * const myExistingAccount = new Account({privateKey: 'myExistingPrivateKey'})
 *
 * // Sign a message
 * const hello_world = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])
 * const signature = myRandomAccount.sign(hello_world)
 *
 * // Verify a signature
 * myRandomAccount.verify(hello_world, signature)
 */
class Account {
    _privateKey;
    _viewKey;
    _address;
    constructor(params = {}) {
        try {
            this._privateKey = this.privateKeyFromParams(params);
        }
        catch (e) {
            console.error("Wrong parameter", e);
            throw new Error("Wrong Parameter");
        }
        this._viewKey = ViewKey.from_private_key(this._privateKey);
        this._address = Address.from_private_key(this._privateKey);
    }
    /**
     * Attempts to create an account from a private key ciphertext
     * @param {PrivateKeyCiphertext | string} ciphertext
     * @param {string} password
     * @returns {PrivateKey | Error}
     *
     * @example
     * const ciphertext = PrivateKey.newEncrypted("password");
     * const account = Account.fromCiphertext(ciphertext, "password");
     */
    static fromCiphertext(ciphertext, password) {
        try {
            ciphertext = (typeof ciphertext === "string") ? PrivateKeyCiphertext.fromString(ciphertext) : ciphertext;
            const _privateKey = PrivateKey.fromPrivateKeyCiphertext(ciphertext, password);
            return new Account({ privateKey: _privateKey.to_string() });
        }
        catch (e) {
            throw new Error("Wrong password or invalid ciphertext");
        }
    }
    privateKeyFromParams(params) {
        if (params.seed) {
            return PrivateKey.from_seed_unchecked(params.seed);
        }
        if (params.privateKey) {
            return PrivateKey.from_string(params.privateKey);
        }
        return new PrivateKey();
    }
    privateKey() {
        return this._privateKey;
    }
    viewKey() {
        return this._viewKey;
    }
    address() {
        return this._address;
    }
    toString() {
        return this.address().to_string();
    }
    /**
     * Encrypt the account's private key with a password
     * @param {string} ciphertext
     * @returns {PrivateKeyCiphertext}
     *
     * @example
     * const account = new Account();
     * const ciphertext = account.encryptAccount("password");
     */
    encryptAccount(password) {
        return this._privateKey.toCiphertext(password);
    }
    /**
     * Decrypts a Record in ciphertext form into plaintext
     * @param {string} ciphertext
     * @returns {Record}
     *
     * @example
     * const account = new Account();
     * const record = account.decryptRecord("record1ciphertext");
     */
    decryptRecord(ciphertext) {
        return this._viewKey.decrypt(ciphertext);
    }
    /**
     * Decrypts an array of Records in ciphertext form into plaintext
     * @param {string[]} ciphertexts
     * @returns {Record[]}
     *
     * @example
     * const account = new Account();
     * const record = account.decryptRecords(["record1ciphertext", "record2ciphertext"]);
     */
    decryptRecords(ciphertexts) {
        return ciphertexts.map((ciphertext) => this._viewKey.decrypt(ciphertext));
    }
    /**
     * Determines whether the account owns a ciphertext record
     * @param {RecordCipherText | string} ciphertext
     * @returns {boolean}
     *
     * @example
     * // Create a connection to the Aleo network and an account
     * const connection = new NodeConnection("vm.aleo.org/api");
     * const account = Account.fromCiphertext("ciphertext", "password");
     *
     * // Get a record from the network
     * const record = connection.getBlock(1234);
     * const recordCipherText = record.transactions[0].execution.transitions[0].id;
     *
     * // Check if the account owns the record
     * if account.ownsRecord(recordCipherText) {
     *     // Then one can do something like:
     *     // Decrypt the record and check if it's spent
     *     // Store the record in a local database
     *     // Etc.
     * }
     */
    ownsRecordCiphertext(ciphertext) {
        if (typeof ciphertext === 'string') {
            try {
                const ciphertextObject = RecordCiphertext.fromString(ciphertext);
                return ciphertextObject.isOwner(this._viewKey);
            }
            catch (e) {
                return false;
            }
        }
        else {
            return ciphertext.isOwner(this._viewKey);
        }
    }
    /**
     * Signs a message with the account's private key.
     * Returns a Signature.
     *
     * @param {Uint8Array} message
     * @returns {Signature}
     *
     * @example
     * const account = new Account();
     * const message = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])
     * account.sign(message);
     */
    sign(message) {
        return this._privateKey.sign(message);
    }
    /**
     * Verifies the Signature on a message.
     *
     * @param {Uint8Array} message
     * @param {Signature} signature
     * @returns {boolean}
     *
     * @example
     * const account = new Account();
     * const message = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])
     * const signature = account.sign(message);
     * account.verify(message, signature);
     */
    verify(message, signature) {
        return this._address.verify(message, signature);
    }
}

async function get(url) {
    const response = await fetch(url);
    if (!response.ok) {
        throw new Error(response.status + " could not get URL " + url);
    }
    return response;
}
async function post(url, options) {
    options.method = "POST";
    const response = await fetch(url, options);
    if (!response.ok) {
        throw new Error(response.status + " could not post URL " + url);
    }
    return response;
}

/**
 * Client library that encapsulates REST calls to publicly exposed endpoints of Aleo nodes. The methods provided in this
 * allow users to query public information from the Aleo blockchain and submit transactions to the network.
 *
 * @param {string} host
 * @example
 * // Connection to a local node
 * const localNetworkClient = new AleoNetworkClient("http://localhost:3030");
 *
 * // Connection to a public beacon node
 * const publicnetworkClient = new AleoNetworkClient("https://vm.aleo.org/api");
 */
class AleoNetworkClient {
    host;
    account;
    constructor(host) {
        this.host = host + "/testnet3";
    }
    /**
     * Set an account to use in networkClient calls
     *
     * @param {Account} account
     * @example
     * const account = new Account();
     * networkClient.setAccount(account);
     */
    setAccount(account) {
        this.account = account;
    }
    /**
     * Return the Aleo account used in the networkClient
     *
     * @example
     * const account = networkClient.getAccount();
     */
    getAccount() {
        return this.account;
    }
    /**
     * Set a new host for the networkClient
     *
     * @param {string} host The address of a node hosting the Aleo API
     * @param host
     */
    setHost(host) {
        this.host = host + "/testnet3";
    }
    async fetchData(url = "/") {
        try {
            const response = await get(this.host + url);
            return await response.json();
        }
        catch (error) {
            throw new Error("Error fetching data.");
        }
    }
    /**
     * Attempts to find unspent records in the Aleo blockchain for a specified private key
     * @param {number} startHeight - The height at which to start searching for unspent records
     * @param {number} endHeight - The height at which to stop searching for unspent records
     * @param {string | PrivateKey} privateKey - The private key to use to find unspent records
     * @param {number[]} amounts - The amounts (in microcredits) to search for (eg. [100, 200, 3000])
     * @param {number} maxMicrocredits - The maximum number of microcredits to search for
     * @param {string[]} nonces - The nonces of already found records to exclude from the search
     *
     * @example
     * // Find all unspent records
     * const privateKey = "[PRIVATE_KEY]";
     * const records = networkClient.findUnspentRecords(0, undefined, privateKey);
     *
     * // Find specific amounts
     * const startHeight = 500000;
     * const amounts = [600000, 1000000];
     * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, amounts);
     *
     * // Find specific amounts with a maximum number of cumulative microcredits
     * const maxMicrocredits = 100000;
     * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, undefined, maxMicrocredits);
     */
    async findUnspentRecords(startHeight, endHeight, privateKey, amounts, maxMicrocredits, nonces) {
        nonces = nonces || [];
        // Ensure start height is not negative
        if (startHeight < 0) {
            throw new Error("Start height must be greater than or equal to 0");
        }
        // Initialize search parameters
        const records = new Array();
        let start;
        let end;
        let resolvedPrivateKey;
        let failures = 0;
        let totalRecordValue = BigInt(0);
        let latestHeight;
        // Ensure a private key is present to find owned records
        if (typeof privateKey === "undefined") {
            if (typeof this.account === "undefined") {
                throw new Error("Private key must be specified in an argument to findOwnedRecords or set in the AleoNetworkClient");
            }
            else {
                resolvedPrivateKey = this.account._privateKey;
            }
        }
        else {
            try {
                resolvedPrivateKey = privateKey instanceof PrivateKey ? privateKey : PrivateKey.from_string(privateKey);
            }
            catch (error) {
                throw new Error("Error parsing private key provided.");
            }
        }
        const viewKey = resolvedPrivateKey.to_view_key();
        // Get the latest height to ensure the range being searched is valid
        try {
            const blockHeight = await this.getLatestHeight();
            if (typeof blockHeight === "number") {
                latestHeight = blockHeight;
            }
            else {
                throw new Error("Error fetching latest block height.");
            }
        }
        catch (error) {
            throw new Error("Error fetching latest block height.");
        }
        // If no end height is specified or is greater than the latest height, set the end height to the latest height
        if (typeof endHeight === "number" && endHeight <= latestHeight) {
            end = endHeight;
        }
        else {
            end = latestHeight;
        }
        // If the starting is greater than the ending height, return an error
        if (startHeight > end) {
            throw new Error("Start height must be less than or equal to end height.");
        }
        // Iterate through blocks in reverse order in chunks of 50
        while (end > startHeight) {
            start = end - 50;
            if (start < startHeight) {
                start = startHeight;
            }
            try {
                // Get 50 blocks (or the difference between the start and end if less than 50)
                const blocks = await this.getBlockRange(start, end);
                end = start;
                if (!(blocks instanceof Error)) {
                    // Iterate through blocks to find unspent records
                    for (let i = 0; i < blocks.length; i++) {
                        const block = blocks[i];
                        const transactions = block.transactions;
                        if (!(typeof transactions === "undefined")) {
                            for (let j = 0; j < transactions.length; j++) {
                                const confirmedTransaction = transactions[j];
                                // Search for unspent records in execute transactions of credits.aleo
                                if (confirmedTransaction.type == "execute") {
                                    const transaction = confirmedTransaction.transaction;
                                    if (transaction.execution && !(typeof transaction.execution.transitions == "undefined")) {
                                        for (let k = 0; k < transaction.execution.transitions.length; k++) {
                                            const transition = transaction.execution.transitions[k];
                                            // Only search for unspent records in credits.aleo (for now)
                                            if (transition.program !== "credits.aleo") {
                                                continue;
                                            }
                                            if (!(typeof transition.outputs == "undefined")) {
                                                for (let l = 0; l < transition.outputs.length; l++) {
                                                    const output = transition.outputs[l];
                                                    if (output.type === "record") {
                                                        try {
                                                            // Create a wasm record ciphertext object from the found output
                                                            const record = RecordCiphertext.fromString(output.value);
                                                            // Determine if the record is owned by the specified view key
                                                            if (record.isOwner(viewKey)) {
                                                                // Decrypt the record and get the serial number
                                                                const recordPlaintext = record.decrypt(viewKey);
                                                                // If the record has already been found, skip it
                                                                const nonce = recordPlaintext.nonce();
                                                                if (nonces.includes(nonce)) {
                                                                    continue;
                                                                }
                                                                // Otherwise record the nonce that has been found
                                                                const serialNumber = recordPlaintext.serialNumberString(resolvedPrivateKey, "credits.aleo", "credits");
                                                                // Attempt to see if the serial number is spent
                                                                try {
                                                                    await this.getTransitionId(serialNumber);
                                                                }
                                                                catch (error) {
                                                                    // If it's not found, add it to the list of unspent records
                                                                    if (!amounts) {
                                                                        records.push(recordPlaintext);
                                                                        // If the user specified a maximum number of microcredits, check if the search has found enough
                                                                        if (typeof maxMicrocredits === "number") {
                                                                            totalRecordValue += recordPlaintext.microcredits();
                                                                            // Exit if the search has found the amount specified
                                                                            if (totalRecordValue >= BigInt(maxMicrocredits)) {
                                                                                return records;
                                                                            }
                                                                        }
                                                                    }
                                                                    // If the user specified a list of amounts, check if the search has found them
                                                                    if (!(typeof amounts === "undefined") && amounts.length > 0) {
                                                                        let amounts_found = 0;
                                                                        if (recordPlaintext.microcredits() > amounts[amounts_found]) {
                                                                            amounts_found += 1;
                                                                            records.push(recordPlaintext);
                                                                            // If the user specified a maximum number of microcredits, check if the search has found enough
                                                                            if (typeof maxMicrocredits === "number") {
                                                                                totalRecordValue += recordPlaintext.microcredits();
                                                                                // Exit if the search has found the amount specified
                                                                                if (totalRecordValue >= BigInt(maxMicrocredits)) {
                                                                                    return records;
                                                                                }
                                                                            }
                                                                            if (records.length >= amounts.length) {
                                                                                return records;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        catch (error) {
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (error) {
                // If there is an error fetching blocks, log it and keep searching
                console.warn("Error fetching blocks in range: " + start.toString() + "-" + end.toString());
                console.warn("Error: ", error);
                failures += 1;
                if (failures > 10) {
                    console.warn("10 failures fetching records reached. Returning records fetched so far");
                    return records;
                }
            }
        }
        return records;
    }
    /**
     * Returns the contents of the block at the specified block height
     *
     * @param {number} height
     * @example
     * const block = networkClient.getBlock(1234);
     */
    async getBlock(height) {
        try {
            const block = await this.fetchData("/block/" + height);
            return block;
        }
        catch (error) {
            throw new Error("Error fetching block.");
        }
    }
    /**
     * Returns a range of blocks between the specified block heights
     *
     * @param {number} start
     * @param {number} end
     * @example
     * const blockRange = networkClient.getBlockRange(2050, 2100);
     */
    async getBlockRange(start, end) {
        try {
            return await this.fetchData("/blocks?start=" + start + "&end=" + end);
        }
        catch (error) {
            const errorMessage = "Error fetching blocks between " + start + " and " + end + ".";
            throw new Error(errorMessage);
        }
    }
    /**
     * Returns the contents of the latest block
     *
     * @example
     * const latestHeight = networkClient.getLatestBlock();
     */
    async getLatestBlock() {
        try {
            return await this.fetchData("/latest/block");
        }
        catch (error) {
            throw new Error("Error fetching latest block.");
        }
    }
    /**
     * Returns the hash of the last published block
     *
     * @example
     * const latestHash = networkClient.getLatestHash();
     */
    async getLatestHash() {
        try {
            return await this.fetchData("/latest/hash");
        }
        catch (error) {
            throw new Error("Error fetching latest hash.");
        }
    }
    /**
     * Returns the latest block height
     *
     * @example
     * const latestHeight = networkClient.getLatestHeight();
     */
    async getLatestHeight() {
        try {
            return await this.fetchData("/latest/height");
        }
        catch (error) {
            throw new Error("Error fetching latest height.");
        }
    }
    /**
     * Returns the source code of a program given a program ID
     *
     * @param {string} programId The program ID of a program deployed to the Aleo Network
     * @return {Promise<string>} Source code of the program
     *
     * @example
     * const program = networkClient.getProgram("hello_hello.aleo");
     * const expectedSource = "program hello_hello.aleo;\n\nfunction hello:\n    input r0 as u32.public;\n    input r1 as u32.private;\n    add r0 r1 into r2;\n    output r2 as u32.private;\n"
     * assert.equal(program, expectedSource);
     */
    async getProgram(programId) {
        try {
            return await this.fetchData("/program/" + programId);
        }
        catch (error) {
            throw new Error("Error fetching program");
        }
    }
    /**
     * Returns a program object from a program ID or program source code
     *
     * @param {string} inputProgram The program ID or program source code of a program deployed to the Aleo Network
     * @return {Promise<Program | Error>} Source code of the program
     *
     * @example
     * const programID = "hello_hello.aleo";
     * const programSource = "program hello_hello.aleo;\n\nfunction hello:\n    input r0 as u32.public;\n    input r1 as u32.private;\n    add r0 r1 into r2;\n    output r2 as u32.private;\n"
     *
     * // Get program object from program ID or program source code
     * const programObjectFromID = await networkClient.getProgramObject(programID);
     * const programObjectFromSource = await networkClient.getProgramObject(programSource);
     *
     * // Both program objects should be equal
     * assert.equal(programObjectFromID.to_string(), programObjectFromSource.to_string());
     */
    async getProgramObject(inputProgram) {
        try {
            return Program.fromString(inputProgram);
        }
        catch (error) {
            try {
                return Program.fromString((await this.getProgram(inputProgram)));
            }
            catch (error) {
                throw new Error(`${inputProgram} is neither a program name or a valid program`);
            }
        }
    }
    /**
     *  Returns an object containing the source code of a program and the source code of all programs it imports
     *
     * @param {Program | string} inputProgram The program ID or program source code of a program deployed to the Aleo Network
     * @returns {Promise<ProgramImports>} Object of the form { "program_id": "program_source", .. } containing program id & source code for all program imports
     *
     * @example
     * const double_test_source = "import multiply_test.aleo;\n\nprogram double_test.aleo;\n\nfunction double_it:\n    input r0 as u32.private;\n    call multiply_test.aleo/multiply 2u32 r0 into r1;\n    output r1 as u32.private;\n"
     * const double_test = Program.fromString(double_test_source);
     * const expectedImports = {
     *     "multiply_test.aleo": "program multiply_test.aleo;\n\nfunction multiply:\n    input r0 as u32.public;\n    input r1 as u32.private;\n    mul r0 r1 into r2;\n    output r2 as u32.private;\n"
     * }
     *
     * // Imports can be fetched using the program ID, source code, or program object
     * let programImports = await networkClient.getProgramImports("double_test.aleo");
     * assert.deepStrictEqual(programImports, expectedImports);
     *
     * // Using the program source code
     * programImports = await networkClient.getProgramImports(double_test_source);
     * assert.deepStrictEqual(programImports, expectedImports);
     *
     * // Using the program object
     * programImports = await networkClient.getProgramImports(double_test);
     * assert.deepStrictEqual(programImports, expectedImports);
     */
    async getProgramImports(inputProgram) {
        try {
            const imports = {};
            // Get the program object or fail if the program is not valid or does not exist
            const program = inputProgram instanceof Program ? inputProgram : (await this.getProgramObject(inputProgram));
            // Get the list of programs that the program imports
            const importList = program.getImports();
            // Recursively get any imports that the imported programs have in a depth first search order
            for (let i = 0; i < importList.length; i++) {
                const import_id = importList[i];
                if (!imports.hasOwnProperty(import_id)) {
                    const programSource = await this.getProgram(import_id);
                    const nestedImports = await this.getProgramImports(import_id);
                    for (const key in nestedImports) {
                        if (!imports.hasOwnProperty(key)) {
                            imports[key] = nestedImports[key];
                        }
                    }
                    imports[import_id] = programSource;
                }
            }
            return imports;
        }
        catch (error) {
            throw logAndThrow("Error fetching program imports: " + error);
        }
    }
    /**
     * Get a list of the program names that a program imports
     *
     * @param {Program | string} inputProgram - The program id or program source code to get the imports of
     * @returns {string[]} - The list of program names that the program imports
     *
     * @example
     * const programImportsNames = networkClient.getProgramImports("double_test.aleo");
     * const expectedImportsNames = ["multiply_test.aleo"];
     * assert.deepStrictEqual(programImportsNames, expectedImportsNames);
     */
    async getProgramImportNames(inputProgram) {
        try {
            const program = inputProgram instanceof Program ? inputProgram : (await this.getProgramObject(inputProgram));
            return program.getImports();
        }
        catch (error) {
            throw new Error("Error fetching program imports with error: " + error);
        }
    }
    /**
     * Returns the names of the mappings of a program
     *
     * @param {string} programId - The program ID to get the mappings of (e.g. "credits.aleo")
     * @example
     * const mappings = networkClient.getProgramMappingNames("credits.aleo");
     * const expectedMappings = ["account"];
     * assert.deepStrictEqual(mappings, expectedMappings);
     */
    async getProgramMappingNames(programId) {
        try {
            return await this.fetchData("/program/" + programId + "/mappings");
        }
        catch (error) {
            throw new Error("Error fetching program mappings - ensure the program exists on chain before trying again");
        }
    }
    /**
     * Returns the value of a program's mapping for a specific key
     *
     * @param {string} programId - The program ID to get the mapping value of (e.g. "credits.aleo")
     * @param {string} mappingName - The name of the mapping to get the value of (e.g. "account")
     * @param {string} key - The key of the mapping to get the value of (e.g. "aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px")
     * @return {Promise<string>} String representation of the value of the mapping
     *
     * @example
     * // Get public balance of an account
     * const mappingValue = networkClient.getMappingValue("credits.aleo", "account", "aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px");
     * const expectedValue = "0u64";
     * assert.equal(mappingValue, expectedValue);
     */
    async getProgramMappingValue(programId, mappingName, key) {
        try {
            return await this.fetchData("/program/" + programId + "/mapping/" + mappingName + "/" + key);
        }
        catch (error) {
            throw new Error("Error fetching mapping value - ensure the mapping exists and the key is correct");
        }
    }
    /**
     * Returns the latest state/merkle root of the Aleo blockchain
     *
     * @example
     * const stateRoot = networkClient.getStateRoot();
     */
    async getStateRoot() {
        try {
            return await this.fetchData("/latest/stateRoot");
        }
        catch (error) {
            throw new Error("Error fetching Aleo state root");
        }
    }
    /**
     * Returns a transaction by its unique identifier
     *
     * @param {string} id
     * @example
     * const transaction = networkClient.getTransaction("at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj");
     */
    async getTransaction(id) {
        try {
            return await this.fetchData("/transaction/" + id);
        }
        catch (error) {
            throw new Error("Error fetching transaction.");
        }
    }
    /**
     * Returns the transactions present at the specified block height
     *
     * @param {number} height
     * @example
     * const transactions = networkClient.getTransactions(654);
     */
    async getTransactions(height) {
        try {
            return await this.fetchData("/block/" + height.toString() + "/transactions");
        }
        catch (error) {
            throw new Error("Error fetching transactions.");
        }
    }
    /**
     * Returns the transactions in the memory pool.
     *
     * @example
     * const transactions = networkClient.getTransactionsInMempool();
     */
    async getTransactionsInMempool() {
        try {
            return await this.fetchData("/memoryPool/transactions");
        }
        catch (error) {
            throw new Error("Error fetching transactions from mempool.");
        }
    }
    /**
     * Returns the transition id by its unique identifier
     * @param {string} transition_id - The transition id to get
     *
     * @example
     * const transition = networkClient.getTransitionId("2429232855236830926144356377868449890830704336664550203176918782554219952323field");
     */
    async getTransitionId(transition_id) {
        try {
            return await this.fetchData("/find/transitionID/" + transition_id);
        }
        catch (error) {
            throw new Error("Error fetching transition ID.");
        }
    }
    /**
     * Submit an execute or deployment transaction to the Aleo network
     *
     * @param {WasmTransaction | string} transaction  - The transaction to submit to the network
     * @returns {string | Error} - The transaction id of the submitted transaction or the resulting error
     */
    async submitTransaction(transaction) {
        const transaction_string = transaction instanceof Transaction ? transaction.toString() : transaction;
        try {
            const response = await post(this.host + "/transaction/broadcast", {
                body: transaction_string,
                headers: {
                    "Content-Type": "application/json",
                },
            });
            try {
                return await response.json();
            }
            catch (error) {
                throw new Error(`Error posting transaction. Aleo network response: ${error.message}`);
            }
        }
        catch (error) {
            throw new Error(`Error posting transaction: No response received: ${error.message}`);
        }
    }
}

/**
 * AleoKeyProviderParams search parameter for the AleoKeyProvider. It allows for the specification of a proverUri and
 * verifierUri to fetch keys via HTTP from a remote resource as well as a unique cacheKey to store the keys in memory.
 */
class AleoKeyProviderParams {
    proverUri;
    verifierUri;
    cacheKey;
    /**
     * Create a new AleoKeyProviderParams object which implements the KeySearchParams interface. Users can optionally
     * specify a url for the proverUri & verifierUri to fetch keys via HTTP from a remote resource as well as a unique
     * cacheKey to store the keys in memory for future use. If no proverUri or verifierUri is specified, a cachekey must
     * be provided.
     *
     * @param { AleoKeyProviderInitParams } params - Optional search parameters
     */
    constructor(params) {
        this.proverUri = params.proverUri;
        this.verifierUri = params.verifierUri;
        this.cacheKey = params.cacheKey;
    }
}
/**
 * AleoKeyProvider class. Implements the KeyProvider interface. Enables the retrieval of Aleo program proving and
 * verifying keys for the credits.aleo program over http from official Aleo sources and storing and retrieving function
 * keys from a local memory cache.
 */
class AleoKeyProvider {
    cache;
    cacheOption;
    keyUris;
    async fetchBytes(url = "/") {
        try {
            const response = await get(url);
            const data = await response.arrayBuffer();
            return new Uint8Array(data);
        }
        catch (error) {
            throw new Error("Error fetching data." + error);
        }
    }
    constructor() {
        this.keyUris = KEY_STORE;
        this.cache = new Map();
        this.cacheOption = false;
    }
    /**
     * Use local memory to store keys
     *
     * @param {boolean} useCache whether to store keys in local memory
     */
    useCache(useCache) {
        this.cacheOption = useCache;
    }
    /**
     * Clear the key cache
     */
    clearCache() {
        this.cache.clear();
    }
    /**
     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId
     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.
     *
     * @param {string} keyId access key for the cache
     * @param {FunctionKeyPair} keys keys to cache
     */
    cacheKeys(keyId, keys) {
        const [provingKey, verifyingKey] = keys;
        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);
    }
    /**
     * Determine if a keyId exists in the cache
     *
     * @param {string} keyId keyId of a proving and verifying key pair
     * @returns {boolean} true if the keyId exists in the cache, false otherwise
     */
    containsKeys(keyId) {
        return this.cache.has(keyId);
    }
    /**
     * Delete a set of keys from the cache
     *
     * @param {string} keyId keyId of a proving and verifying key pair to delete from memory
     * @returns {boolean} true if the keyId exists in the cache and was deleted, false if the key did not exist
     */
    deleteKeys(keyId) {
        return this.cache.delete(keyId);
    }
    /**
     * Get a set of keys from the cache
     * @param keyId keyId of a proving and verifying key pair
     *
     * @returns {FunctionKeyPair | Error} Proving and verifying keys for the specified program
     */
    getKeys(keyId) {
        console.debug(`Checking if key exists in cache. KeyId: ${keyId}`);
        if (this.cache.has(keyId)) {
            const [provingKeyBytes, verifyingKeyBytes] = this.cache.get(keyId);
            return [ProvingKey.fromBytes(provingKeyBytes), VerifyingKey.fromBytes(verifyingKeyBytes)];
        }
        else {
            return new Error("Key not found in cache.");
        }
    }
    /**
     * Get arbitrary function keys from a provider
     *
     * @param {KeySearchParams} params parameters for the key search in form of: {proverUri: string, verifierUri: string, cacheKey: string}
     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program
     *
     * @example
     * // Create a new object which implements the KeyProvider interface
     * const networkClient = new AleoNetworkClient("https://vm.aleo.org/api");
     * const keyProvider = new AleoKeyProvider();
     * const recordProvider = new NetworkRecordProvider(account, networkClient);
     * const AleoProviderParams = new AleoProviderParams("https://testnet3.parameters.aleo.org/transfer_private.");
     *
     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers
     * const programManager = new ProgramManager("https://vm.aleo.org/api", keyProvider, recordProvider);
     * programManager.transfer(1, "aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at", "public", 0.5);
     *
     * // Keys can also be fetched manually using the key provider
     * const keySearchParams = { "cacheKey": "myProgram:myFunction" };
     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(keySearchParams);
     */
    async functionKeys(params) {
        if (params) {
            let proverUrl;
            let verifierUrl;
            let cacheKey;
            if ("proverUrl" in params && typeof params["proverUrl"] == "string") {
                proverUrl = params["proverUrl"];
            }
            if ("verifierUrl" in params && typeof params["verifierUrl"] == "string") {
                verifierUrl = params["verifierUrl"];
            }
            if ("cacheKey" in params && typeof params["cacheKey"] == "string") {
                cacheKey = params["cacheKey"];
            }
            if (proverUrl && verifierUrl) {
                return await this.fetchKeys(proverUrl, verifierUrl, cacheKey);
            }
            if (cacheKey) {
                return this.getKeys(cacheKey);
            }
        }
        throw Error("Invalid parameters provided, must provide either a cacheKey and/or a proverUrl and a verifierUrl");
    }
    /**
     * Returns the proving and verifying keys for a specified program from a specified url.
     *
     * @param {string} verifierUrl Url of the proving key
     * @param {string} proverUrl Url the verifying key
     * @param {string} cacheKey Key to store the keys in the cache
     *
     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the specified program
     *
     * @example
     * // Create a new AleoKeyProvider object
     * const networkClient = new AleoNetworkClient("https://vm.aleo.org/api");
     * const keyProvider = new AleoKeyProvider();
     * const recordProvider = new NetworkRecordProvider(account, networkClient);
     *
     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers
     * const programManager = new ProgramManager("https://vm.aleo.org/api", keyProvider, recordProvider);
     * programManager.transfer(1, "aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at", "public", 0.5);
     *
     * // Keys can also be fetched manually
     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.fetchKeys("https://testnet3.parameters.aleo.org/transfer_private.prover.2a9a6f2", "https://testnet3.parameters.aleo.org/transfer_private.verifier.3a59762");
     */
    async fetchKeys(proverUrl, verifierUrl, cacheKey) {
        try {
            // If cache is enabled, check if the keys have already been fetched and return them if they have
            if (this.cacheOption) {
                if (!cacheKey) {
                    cacheKey = proverUrl;
                }
                const value = this.cache.get(cacheKey);
                if (typeof value !== "undefined") {
                    return [ProvingKey.fromBytes(value[0]), VerifyingKey.fromBytes(value[1])];
                }
                else {
                    console.debug("Fetching proving keys from url " + proverUrl);
                    const provingKey = ProvingKey.fromBytes(await this.fetchBytes(proverUrl));
                    console.debug("Fetching verifying keys " + verifierUrl);
                    const verifyingKey = (await this.getVerifyingKey(verifierUrl));
                    this.cache.set(cacheKey, [provingKey.toBytes(), verifyingKey.toBytes()]);
                    return [provingKey, verifyingKey];
                }
            }
            else {
                // If cache is disabled, fetch the keys and return them
                const provingKey = ProvingKey.fromBytes(await this.fetchBytes(proverUrl));
                const verifyingKey = (await this.getVerifyingKey(verifierUrl));
                return [provingKey, verifyingKey];
            }
        }
        catch (error) {
            throw new Error(`Error: ${error} fetching fee proving and verifying keys from ${proverUrl} and ${verifierUrl}.`);
        }
    }
    /**
     * Returns the proving and verifying keys for the transfer functions in the credits.aleo program
     * @param {string} visibility Visibility of the transfer function
     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the transfer functions
     *
     * @example
     * // Create a new AleoKeyProvider
     * const networkClient = new AleoNetworkClient("https://vm.aleo.org/api");
     * const keyProvider = new AleoKeyProvider();
     * const recordProvider = new NetworkRecordProvider(account, networkClient);
     *
     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers
     * const programManager = new ProgramManager("https://vm.aleo.org/api", keyProvider, recordProvider);
     * programManager.transfer(1, "aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at", "public", 0.5);
     *
     * // Keys can also be fetched manually
     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys("public");
     */
    async transferKeys(visibility) {
        if (PRIVATE_TRANSFER.has(visibility)) {
            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_private.prover, CREDITS_PROGRAM_KEYS.transfer_private.verifier);
        }
        else if (PRIVATE_TO_PUBLIC_TRANSFER.has(visibility)) {
            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_private_to_public.prover, CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier);
        }
        else if (PUBLIC_TRANSFER.has(visibility)) {
            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_public.prover, CREDITS_PROGRAM_KEYS.transfer_public.verifier);
        }
        else if (PUBLIC_TO_PRIVATE_TRANSFER.has(visibility)) {
            return await this.fetchKeys(CREDITS_PROGRAM_KEYS.transfer_public_to_private.prover, CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier);
        }
        else {
            throw new Error("Invalid visibility type");
        }
    }
    /**
     * Returns the proving and verifying keys for the join function in the credits.aleo program
     *
     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the join function
     */
    async joinKeys() {
        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.join.prover, CREDITS_PROGRAM_KEYS.join.verifier);
    }
    /**
     * Returns the proving and verifying keys for the split function in the credits.aleo program
     *
     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the split function
     * */
    async splitKeys() {
        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.split.prover, CREDITS_PROGRAM_KEYS.split.verifier);
    }
    /**
     * Returns the proving and verifying keys for the fee_private function in the credits.aleo program
     *
     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the fee function
     */
    async feePrivateKeys() {
        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.fee_private.prover, CREDITS_PROGRAM_KEYS.fee_private.verifier);
    }
    /**
     * Returns the proving and verifying keys for the fee_public function in the credits.aleo program
     *
     * @returns {Promise<FunctionKeyPair | Error>} Proving and verifying keys for the fee function
     */
    async feePublicKeys() {
        return await this.fetchKeys(CREDITS_PROGRAM_KEYS.fee_public.prover, CREDITS_PROGRAM_KEYS.fee_public.verifier);
    }
    /**
     * Gets a verifying key. If the verifying key is for a credits.aleo function, get it from the wasm cache otherwise
     *
     * @returns {Promise<VerifyingKey | Error>} Verifying key for the function
     */
    // attempt to fetch it from the network
    async getVerifyingKey(verifierUrl) {
        switch (verifierUrl) {
            case CREDITS_PROGRAM_KEYS.fee_private.verifier:
                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.fee_private.verifyingKey);
            case CREDITS_PROGRAM_KEYS.fee_public.verifier:
                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.fee_public.verifyingKey);
            case CREDITS_PROGRAM_KEYS.inclusion.verifier:
                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.inclusion.verifyingKey);
            case CREDITS_PROGRAM_KEYS.join.verifier:
                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.join.verifyingKey);
            case CREDITS_PROGRAM_KEYS.split.verifier:
                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.split.verifyingKey);
            case CREDITS_PROGRAM_KEYS.transfer_private.verifier:
                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_private.verifyingKey);
            case CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier:
                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifyingKey);
            case CREDITS_PROGRAM_KEYS.transfer_public.verifier:
                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_public.verifyingKey);
            case CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier:
                return VerifyingKey.fromString(CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifyingKey);
            default:
                return VerifyingKey.fromBytes(await this.fetchBytes(verifierUrl));
        }
    }
}

/**
 * A record provider implementation that uses the official Aleo API to find records for usage in program execution and
 * deployment, wallet functionality, and other use cases.
 */
class NetworkRecordProvider {
    account;
    networkClient;
    constructor(account, networkClient) {
        this.account = account;
        this.networkClient = networkClient;
    }
    /**
     * Set the account used to search for records
     *
     * @param {Account} account The account to use for searching for records
     */
    setAccount(account) {
        this.account = account;
    }
    /**
     * Find a list of credit records with a given number of microcredits by via the official Aleo API
     *
     * @param {number[]} microcredits The number of microcredits to search for
     * @param {boolean} unspent Whether or not the record is unspent
     * @param {string[]} nonces Nonces of records already found so that they are not found again
     * @param {RecordSearchParams} searchParameters Additional parameters to search for
     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error
     *
     * @example
     * // Create a new NetworkRecordProvider
     * const networkClient = new AleoNetworkClient("https://vm.aleo.org/api");
     * const keyProvider = new AleoKeyProvider();
     * const recordProvider = new NetworkRecordProvider(account, networkClient);
     *
     * // The record provider can be used to find records with a given number of microcredits
     * const record = await recordProvider.findCreditsRecord(5000, true, []);
     *
     * // When a record is found but not yet used, it's nonce should be added to the nonces parameter so that it is not
     * // found again if a subsequent search is performed
     * const records = await recordProvider.findCreditsRecords(5000, true, [record.nonce()]);
     *
     * // When the program manager is initialized with the record provider it will be used to find automatically find
     * // fee records and amount records for value transfers so that they do not need to be specified manually
     * const programManager = new ProgramManager("https://vm.aleo.org/api", keyProvider, recordProvider);
     * programManager.transfer(1, "aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at", "public", 0.5);
     *
     * */
    async findCreditsRecords(microcredits, unspent, nonces, searchParameters) {
        let startHeight = 0;
        let endHeight = 0;
        if (searchParameters) {
            if ("startHeight" in searchParameters && typeof searchParameters["endHeight"] == "number") {
                startHeight = searchParameters["startHeight"];
            }
            if ("endHeight" in searchParameters && typeof searchParameters["endHeight"] == "number") {
                endHeight = searchParameters["endHeight"];
            }
        }
        // If the end height is not specified, use the current block height
        if (endHeight == 0) {
            const end = await this.networkClient.getLatestHeight();
            if (end instanceof Error) {
                throw logAndThrow("Unable to get current block height from the network");
            }
            endHeight = end;
        }
        // If the start height is greater than the end height, throw an error
        if (startHeight >= endHeight) {
            throw logAndThrow("Start height must be less than end height");
        }
        return await this.networkClient.findUnspentRecords(startHeight, endHeight, this.account.privateKey(), microcredits, undefined, nonces);
    }
    /**
     * Find a credit record with a given number of microcredits by via the official Aleo API
     *
     * @param {number} microcredits The number of microcredits to search for
     * @param {boolean} unspent Whether or not the record is unspent
     * @param {string[]} nonces Nonces of records already found so that they are not found again
     * @param {RecordSearchParams} searchParameters Additional parameters to search for
     * @returns {Promise<RecordPlaintext | Error>} The record if found, otherwise an error
     *
     * @example
     * // Create a new NetworkRecordProvider
     * const networkClient = new AleoNetworkClient("https://vm.aleo.org/api");
     * const keyProvider = new AleoKeyProvider();
     * const recordProvider = new NetworkRecordProvider(account, networkClient);
     *
     * // The record provider can be used to find records with a given number of microcredits
     * const record = await recordProvider.findCreditsRecord(5000, true, []);
     *
     * // When a record is found but not yet used, it's nonce should be added to the nonces parameter so that it is not
     * // found again if a subsequent search is performed
     * const records = await recordProvider.findCreditsRecords(5000, true, [record.nonce()]);
     *
     * // When the program manager is initialized with the record provider it will be used to find automatically find
     * // fee records and amount records for value transfers so that they do not need to be specified manually
     * const programManager = new ProgramManager("https://vm.aleo.org/api", keyProvider, recordProvider);
     * programManager.transfer(1, "aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at", "public", 0.5);
     */
    async findCreditsRecord(microcredits, unspent, nonces, searchParameters) {
        const records = await this.findCreditsRecords([microcredits], unspent, nonces, searchParameters);
        if (!(records instanceof Error) && records.length > 0) {
            return records[0];
        }
        console.error("Record not found with error:", records);
        return new Error("Record not found");
    }
    /**
     * Find an arbitrary record. WARNING: This function is not implemented yet and will throw an error.
     */
    async findRecord(unspent, nonces, searchParameters) {
        throw new Error("Method not implemented.");
    }
    /**
     * Find multiple arbitrary records. WARNING: This function is not implemented yet and will throw an error.
     */
    async findRecords(unspent, nonces, searchParameters) {
        throw new Error("Method not implemented.");
    }
}
/**
 * BlockHeightSearch is a RecordSearchParams implementation that allows for searching for records within a given
 * block height range.
 *
 * @example
 * // Create a new BlockHeightSearch
 * const params = new BlockHeightSearch(89995, 99995);
 *
 * // Create a new NetworkRecordProvider
 * const networkClient = new AleoNetworkClient("https://vm.aleo.org/api");
 * const keyProvider = new AleoKeyProvider();
 * const recordProvider = new NetworkRecordProvider(account, networkClient);
 *
 * // The record provider can be used to find records with a given number of microcredits and the block height search
 * // can be used to find records within a given block height range
 * const record = await recordProvider.findCreditsRecord(5000, true, [], params);
 *
 */
class BlockHeightSearch {
    startHeight;
    endHeight;
    constructor(startHeight, endHeight) {
        this.startHeight = startHeight;
        this.endHeight = endHeight;
    }
}

// Experimental example where SDK manages worker
let singletonWorker = null;
const createAleoWorker = () => {
    if (!singletonWorker) {
        const worker = new Worker(new URL("worker.js", import.meta.url), {
            type: "module",
        });
        singletonWorker = wrap(worker);
    }
    return singletonWorker;
};

/**
 * The ProgramManager class is used to execute and deploy programs on the Aleo network and create value transfers.
 */
class ProgramManager {
    account;
    keyProvider;
    host;
    networkClient;
    recordProvider;
    executionEngine;
    /** Create a new instance of the ProgramManager
     *
     * @param { string | undefined } host A host uri running the official Aleo API
     * @param { FunctionKeyProvider | undefined } keyProvider A key provider that implements {@link FunctionKeyProvider} interface
     * @param { RecordProvider | undefined } recordProvider A record provider that implements {@link RecordProvider} interface
     */
    constructor(host, keyProvider, recordProvider) {
        if (!host) {
            this.host = "https://vm.aleo.org/api";
            this.networkClient = new AleoNetworkClient(this.host);
        }
        else {
            this.host = host;
            this.networkClient = new AleoNetworkClient(host);
        }
        if (!keyProvider) {
            this.keyProvider = new AleoKeyProvider();
        }
        else {
            this.keyProvider = keyProvider;
        }
        this.executionEngine = new ProgramManager$1();
        this.recordProvider = recordProvider;
    }
    /**
     * Set the account to use for transaction submission to the Aleo network
     *
     * @param {Account} account Account to use for transaction submission
     */
    setAccount(account) {
        this.account = account;
    }
    /**
     * Set the key provider that provides the proving and verifying keys for programs
     *
     * @param {FunctionKeyProvider} keyProvider
     */
    setKeyProvider(keyProvider) {
        this.keyProvider = keyProvider;
    }
    /**
     * Set the host peer to use for transaction submission to the Aleo network
     *
     * @param host {string} Peer url to use for transaction submission
     */
    setHost(host) {
        this.host = host;
        this.networkClient.setHost(host);
    }
    /**
     * Set the record provider that provides records for transactions
     *
     * @param {RecordProvider} recordProvider
     */
    setRecordProvider(recordProvider) {
        this.recordProvider = recordProvider;
    }
    /**
     * Deploy an Aleo program to the Aleo network
     *
     * @param {string} program Program source code
     * @param {number} fee Fee to pay for the transaction
     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance
     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for searching for a record to use
     * pay the deployment fee
     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction
     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction
     * @returns {string | Error} The transaction id of the deployed program or a failure message from the network
     *
     * @example
     * // Create a new NetworkClient, KeyProvider, and RecordProvider
     * const networkClient = new AleoNetworkClient("https://vm.aleo.org/api");
     * const keyProvider = new AleoKeyProvider();
     * const recordProvider = new NetworkRecordProvider(account, networkClient);
     *
     * // Initialize a program manager with the key provider to automatically fetch keys for deployments
     * const program = "program hello_hello.aleo;\n\nfunction hello:\n    input r0 as u32.public;\n    input r1 as u32.private;\n    add r0 r1 into r2;\n    output r2 as u32.private;\n";
     * const programManager = new ProgramManager("https://vm.aleo.org/api", keyProvider, recordProvider);
     *
     * // Define a fee in credits
     * const fee = 1.2;
     *
     * // Deploy the program
     * const tx_id = await programManager.deploy(program, fee);
     *
     * // Verify the transaction was successful
     * const transaction = await programManager.networkClient.getTransaction(tx_id);
     */
    async deploy(program, fee, privateFee, recordSearchParams, feeRecord, privateKey) {
        // Ensure the program is valid and does not exist on the network
        try {
            const programObject = Program.fromString(program);
            let programSource;
            try {
                programSource = this.networkClient.getProgram(programObject.id());
            }
            catch (e) {
                // Program does not exist on the network, deployment can proceed
                console.log(`Program ${programObject.id()} does not exist on the network, deploying...`);
            }
            if (typeof programSource == "string") {
                throw (`Program ${programObject.id()} already exists on the network, please rename your program`);
            }
        }
        catch (e) {
            throw logAndThrow(`Error validating program: ${e}`);
        }
        // Get the private key from the account if it is not provided in the parameters
        let deploymentPrivateKey = privateKey;
        if (typeof privateKey === "undefined" && typeof this.account !== "undefined") {
            deploymentPrivateKey = this.account.privateKey();
        }
        if (typeof deploymentPrivateKey === "undefined") {
            throw ("No private key provided and no private key set in the ProgramManager");
        }
        // Get the fee record from the account if it is not provided in the parameters
        try {
            feeRecord = privateFee ? await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;
        }
        catch (e) {
            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);
        }
        // Get the proving and verifying keys from the key provider
        let feeKeys;
        try {
            feeKeys = privateFee ? await this.keyProvider.feePrivateKeys() : await this.keyProvider.feePublicKeys();
        }
        catch (e) {
            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);
        }
        const [feeProvingKey, feeVerifyingKey] = feeKeys;
        // Resolve the program imports if they exist
        let imports;
        try {
            imports = await this.networkClient.getProgramImports(program);
        }
        catch (e) {
            throw logAndThrow(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);
        }
        // Build a deployment transaction and submit it to the network
        const tx = await this.executionEngine.buildDeploymentTransaction(deploymentPrivateKey, program, fee, feeRecord, this.host, false, imports, feeProvingKey, feeVerifyingKey);
        return await this.networkClient.submitTransaction(tx);
    }
    /**
     * Execute an Aleo program on the Aleo network
     *
     * @param {string} programName Program name containing the function to be executed
     * @param {string} functionName Function name to execute
     * @param {number} fee Fee to pay for the transaction
     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance
     * @param {string[]} inputs Inputs to the function
     * @param {RecordSearchParams} recordSearchParams Optional parameters for searching for a record to pay the fee for
     * the execution transaction
     * @param {KeySearchParams} keySearchParams Optional parameters for finding the matching proving & verifying keys
     * for the function
     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction
     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction
     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction
     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction
     * @returns {Promise<string | Error>}
     *
     * @example
     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers
     * const networkClient = new AleoNetworkClient("https://vm.aleo.org/api");
     * const keyProvider = new AleoKeyProvider();
     * keyProvider.useCache = true;
     * const recordProvider = new NetworkRecordProvider(account, networkClient);
     *
     * // Initialize a program manager with the key provider to automatically fetch keys for executions
     * const programName = "hello_hello.aleo";
     * const programManager = new ProgramManager("https://vm.aleo.org/api", keyProvider, recordProvider);
     * const keySearchParams = { "cacheKey": "hello_hello:hello" };
     * const tx_id = await programManager.execute(programName, "hello_hello", 0.020, ["5u32", "5u32"], undefined, undefined, undefined, keySearchParams);
     * const transaction = await programManager.networkClient.getTransaction(tx_id);
     */
    async execute(programName, functionName, fee, privateFee, inputs, recordSearchParams, keySearchParams, feeRecord, provingKey, verifyingKey, privateKey) {
        // Ensure the function exists on the network
        let program;
        try {
            program = (await this.networkClient.getProgram(programName));
        }
        catch (e) {
            throw logAndThrow(`Error finding ${programName}. Network response: '${e}'. Please ensure you're connected to a valid Aleo network the program is deployed to the network.`);
        }
        // Get the private key from the account if it is not provided in the parameters
        let executionPrivateKey = privateKey;
        if (typeof privateKey === "undefined" && typeof this.account !== "undefined") {
            executionPrivateKey = this.account.privateKey();
        }
        if (typeof executionPrivateKey === "undefined") {
            throw ("No private key provided and no private key set in the ProgramManager");
        }
        // Get the fee record from the account if it is not provided in the parameters
        try {
            feeRecord = privateFee ? await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;
        }
        catch (e) {
            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);
        }
        // Get the fee proving and verifying keys from the key provider
        let feeKeys;
        try {
            feeKeys = privateFee ? await this.keyProvider.feePrivateKeys() : await this.keyProvider.feePublicKeys();
        }
        catch (e) {
            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);
        }
        const [feeProvingKey, feeVerifyingKey] = feeKeys;
        // If the function proving and verifying keys are not provided, attempt to find them using the key provider
        if (!provingKey || !verifyingKey) {
            try {
                [provingKey, verifyingKey] = await this.keyProvider.functionKeys(keySearchParams);
            }
            catch (e) {
                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`);
            }
        }
        // Resolve the program imports if they exist
        let imports;
        try {
            imports = await this.networkClient.getProgramImports(programName);
        }
        catch (e) {
            throw logAndThrow(`Error finding program imports. Network response: '${e}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);
        }
        // Build an execution transaction and submit it to the network
        const tx = await this.executionEngine.buildExecutionTransaction(executionPrivateKey, program, functionName, inputs, fee, feeRecord, this.host, false, imports, provingKey, verifyingKey, feeProvingKey, feeVerifyingKey);
        return await this.networkClient.submitTransaction(tx);
    }
    /**
     * Execute an Aleo program in offline mode
     *
     * @param {string} program Program source code containing the function to be executed
     * @param {string} function_name Function name to execute
     * @param {string[]} inputs Inputs to the function
     * @param {number} proveExecution Whether to prove the execution of the function and return an execution transcript
     * that contains the proof.
     * @param {string[] | undefined} imports Optional imports to the program
     * @param {KeySearchParams | undefined} keySearchParams Optional parameters for finding the matching proving &
     * verifying keys for the function
     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction
     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction
     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction
     * @returns {Promise<string | Error>}
     *
     * @example
     * import { Account, Program } from '@aleohq/sdk';
     *
     * /// Create the source for the "helloworld" program
     * const program = "program helloworld.aleo;\n\nfunction hello:\n    input r0 as u32.public;\n    input r1 as u32.private;\n    add r0 r1 into r2;\n    output r2 as u32.private;\n";
     * const programManager = new ProgramManager();
     *
     * /// Create a temporary account for the execution of the program
     * const account = new Account();
     * programManager.setAccount(account);
     *
     * /// Get the response and ensure that the program executed correctly
     * const executionResponse = await programManager.executeOffline(program, "hello", ["5u32", "5u32"]);
     * const result = executionResponse.getOutputs();
     * assert(result === ["10u32"]);
     */
    async executeOffline(program, function_name, inputs, proveExecution, imports, keySearchParams, provingKey, verifyingKey, privateKey) {
        // Get the private key from the account if it is not provided in the parameters
        let executionPrivateKey = privateKey;
        if (typeof privateKey === "undefined" && typeof this.account !== "undefined") {
            executionPrivateKey = this.account.privateKey();
        }
        if (typeof executionPrivateKey === "undefined") {
            throw ("No private key provided and no private key set in the ProgramManager");
        }
        // If the function proving and verifying keys are not provided, attempt to find them using the key provider
        if (!provingKey || !verifyingKey) {
            try {
                [provingKey, verifyingKey] = await this.keyProvider.functionKeys(keySearchParams);
            }
            catch (e) {
                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`);
            }
        }
        // Run the program offline and return the result
        console.log("Running program offline");
        console.log("Proving key: ", provingKey);
        console.log("Verifying key: ", verifyingKey);
        return this.executionEngine.executeFunctionOffline(executionPrivateKey, program, function_name, inputs, proveExecution, false, imports, provingKey, verifyingKey);
    }
    /**
     * Join two credits records into a single credits record
     *
     * @param {RecordPlaintext | string} recordOne First credits record to join
     * @param {RecordPlaintext | string} recordTwo Second credits record to join
     * @param {number} fee Fee in credits pay for the join transaction
     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance
     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the fee record to use
     * to pay the fee for the join transaction
     * @param {RecordPlaintext | string | undefined} feeRecord Fee record to use for the join transaction
     * @param {PrivateKey | undefined} privateKey Private key to use for the join transaction
     * @returns {Promise<string | Error>}
     */
    async join(recordOne, recordTwo, fee, privateFee, recordSearchParams, feeRecord, privateKey) {
        // Get the private key from the account if it is not provided in the parameters
        let executionPrivateKey = privateKey;
        if (typeof privateKey === "undefined" && typeof this.account !== "undefined") {
            executionPrivateKey = this.account.privateKey();
        }
        if (typeof executionPrivateKey === "undefined") {
            throw ("No private key provided and no private key set in the ProgramManager");
        }
        // Get the proving and verifying keys from the key provider
        let feeKeys;
        let joinKeys;
        try {
            feeKeys = privateFee ? await this.keyProvider.feePrivateKeys() : await this.keyProvider.feePublicKeys();
            joinKeys = await this.keyProvider.joinKeys();
        }
        catch (e) {
            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);
        }
        const [feeProvingKey, feeVerifyingKey] = feeKeys;
        const [joinProvingKey, joinVerifyingKey] = joinKeys;
        // Get the fee record from the account if it is not provided in the parameters
        try {
            feeRecord = privateFee ? await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;
        }
        catch (e) {
            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);
        }
        // Validate the records provided are valid plaintext records
        try {
            recordOne = recordOne instanceof RecordPlaintext ? recordOne : RecordPlaintext.fromString(recordOne);
            recordTwo = recordTwo instanceof RecordPlaintext ? recordTwo : RecordPlaintext.fromString(recordTwo);
        }
        catch (e) {
            throw logAndThrow('Records provided are not valid. Please ensure they are valid plaintext records.');
        }
        // Build an execution transaction and submit it to the network
        const tx = await this.executionEngine.buildJoinTransaction(executionPrivateKey, recordOne, recordTwo, fee, feeRecord, this.host, false, joinProvingKey, joinVerifyingKey, feeProvingKey, feeVerifyingKey);
        return await this.networkClient.submitTransaction(tx);
    }
    /**
     * Split credits into two new credits records
     *
     * @param {number} splitAmount Amount in microcredits to split from the original credits record
     * @param {RecordPlaintext | string} amountRecord Amount record to use for the split transaction
     * @param {PrivateKey | undefined} privateKey Optional private key to use for the split transaction
     * @returns {Promise<string | Error>}
     *
     * @example
     * // Create a new NetworkClient, KeyProvider, and RecordProvider
     * const networkClient = new AleoNetworkClient("https://vm.aleo.org/api");
     * const keyProvider = new AleoKeyProvider();
     * const recordProvider = new NetworkRecordProvider(account, networkClient);
     *
     * // Initialize a program manager with the key provider to automatically fetch keys for executions
     * const programName = "hello_hello.aleo";
     * const programManager = new ProgramManager("https://vm.aleo.org/api", keyProvider, recordProvider);
     * const record = "{  owner: aleo184vuwr5u7u0ha5f5k44067dd2uaqewxx6pe5ltha5pv99wvhfqxqv339h4.private,  microcredits: 45000000u64.private,  _nonce: 4106205762862305308495708971985748592380064201230396559307556388725936304984group.public}"
     * const tx_id = await programManager.split(25000000, record);
     * const transaction = await programManager.networkClient.getTransaction(tx_id);
     */
    async split(splitAmount, amountRecord, privateKey) {
        // Get the private key from the account if it is not provided in the parameters
        let executionPrivateKey = privateKey;
        if (typeof executionPrivateKey === "undefined" && typeof this.account !== "undefined") {
            executionPrivateKey = this.account.privateKey();
        }
        if (typeof executionPrivateKey === "undefined") {
            throw ("No private key provided and no private key set in the ProgramManager");
        }
        // Get the split keys from the key provider
        let splitKeys;
        try {
            splitKeys = await this.keyProvider.splitKeys();
        }
        catch (e) {
            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);
        }
        const [splitProvingKey, splitVerifyingKey] = splitKeys;
        // Validate the record to be split
        try {
            amountRecord = amountRecord instanceof RecordPlaintext ? amountRecord : RecordPlaintext.fromString(amountRecord);
        }
        catch (e) {
            throw logAndThrow("Record provided is not valid. Please ensure it is a valid plaintext record.");
        }
        // Build an execution transaction and submit it to the network
        const tx = await this.executionEngine.buildSplitTransaction(executionPrivateKey, splitAmount, amountRecord, this.host, false, splitProvingKey, splitVerifyingKey);
        return await this.networkClient.submitTransaction(tx);
    }
    /**
     * Transfer credits to another account
     *
     * @param {number} amount The amount of credits to transfer
     * @param {string} recipient The recipient of the transfer
     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'
     * @param {number} fee The fee to pay for the transfer
     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance
     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee
     * records for the transfer transaction
     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer
     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer
     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction
     * @returns {Promise<string | Error>} The transaction id of the transfer transaction
     *
     * @example
     * // Create a new NetworkClient, KeyProvider, and RecordProvider
     * const networkClient = new AleoNetworkClient("https://vm.aleo.org/api");
     * const keyProvider = new AleoKeyProvider();
     * const recordProvider = new NetworkRecordProvider(account, networkClient);
     *
     * // Initialize a program manager with the key provider to automatically fetch keys for executions
     * const programName = "hello_hello.aleo";
     * const programManager = new ProgramManager("https://vm.aleo.org/api", keyProvider, recordProvider);
     * await programManager.initialize();
     * const tx_id = await programManager.transfer(1, "aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px", "private", 0.2)
     * const transaction = await programManager.networkClient.getTransaction(tx_id);
     */
    async transfer(amount, recipient, transferType, fee, privateFee, recordSearchParams, amountRecord, feeRecord, privateKey) {
        // Validate the transfer type
        transferType = validateTransferType(transferType);
        // Get the private key from the account if it is not provided in the parameters
        let executionPrivateKey = privateKey;
        if (typeof executionPrivateKey === "undefined" && typeof this.account !== "undefined") {
            executionPrivateKey = this.account.privateKey();
        }
        if (typeof executionPrivateKey === "undefined") {
            throw ("No private key provided and no private key set in the ProgramManager");
        }
        // Get the proving and verifying keys from the key provider
        let feeKeys;
        let transferKeys;
        try {
            feeKeys = privateFee ? await this.keyProvider.feePrivateKeys() : await this.keyProvider.feePublicKeys();
            transferKeys = await this.keyProvider.transferKeys(transferType);
        }
        catch (e) {
            throw logAndThrow(`Error finding fee keys. Key finder response: '${e}'. Please ensure your key provider is configured correctly.`);
        }
        const [feeProvingKey, feeVerifyingKey] = feeKeys;
        const [transferProvingKey, transferVerifyingKey] = transferKeys;
        // Get the amount and fee record from the account if it is not provided in the parameters
        try {
            // Track the nonces of the records found so no duplicate records are used
            const nonces = [];
            if (requiresAmountRecord(transferType)) {
                // If the transfer type is private and requires an amount record, get it from the record provider
                amountRecord = await this.getCreditsRecord(fee, [], amountRecord, recordSearchParams);
                nonces.push(amountRecord.nonce());
            }
            else {
                amountRecord = undefined;
            }
            feeRecord = privateFee ? await this.getCreditsRecord(fee, nonces, feeRecord, recordSearchParams) : undefined;
        }
        catch (e) {
            throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);
        }
        // Build an execution transaction and submit it to the network
        const tx = await this.executionEngine.buildTransferTransaction(executionPrivateKey, amount, recipient, transferType, amountRecord, fee, feeRecord, this.host, false, transferProvingKey, transferVerifyingKey, feeProvingKey, feeVerifyingKey);
        return await this.networkClient.submitTransaction(tx);
    }
    /**
     * Create a program object from a program's source code
     *
     * @param {string} program Program source code
     * @returns {Program | Error} The program object
     */
    createProgramFromSource(program) {
        return Program.fromString(program);
    }
    /**
     * Get the credits program object
     *
     * @returns {Program} The credits program object
     */
    creditsProgram() {
        return Program.getCreditsProgram();
    }
    /**
     * Verify a program is valid
     *
     * @param {string} program The program source code
     */
    verifyProgram(program) {
        try {
            Program.fromString(program);
            return true;
        }
        catch (e) {
            return false;
        }
    }
    // Internal utility function for getting a credits.aleo record
    async getCreditsRecord(amount, nonces, record, params) {
        try {
            return record instanceof RecordPlaintext ? record : RecordPlaintext.fromString(record);
        }
        catch (e) {
            try {
                const recordProvider = this.recordProvider;
                return (await recordProvider.findCreditsRecord(amount, true, nonces, params));
            }
            catch (e) {
                throw logAndThrow(`Error finding fee record. Record finder response: '${e}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);
            }
        }
    }
}
// Ensure the transfer type requires an amount record
function requiresAmountRecord(transferType) {
    return PRIVATE_TRANSFER_TYPES.has(transferType);
}
// Validate the transfer type
function validateTransferType(transferType) {
    return VALID_TRANSFER_TYPES.has(transferType) ? transferType :
        logAndThrow(`Invalid transfer type '${transferType}'. Valid transfer types are 'private', 'privateToPublic', 'public', and 'publicToPrivate'.`);
}

const KEY_STORE = "https://testnet3.parameters.aleo.org/";
const CREDITS_PROGRAM_KEYS = {
    fee_private: {
        prover: KEY_STORE + "fee_private.prover.d02301c",
        verifier: "fee_private.verifier.00ae6a3",
        verifyingKey: "verifier1qygqqqqqqqqqqqp85yqqqqqqqqqy0ggqqqqqqqqqhlaqqqqqqqqqplt2qyqqqqqqqz50xqqqqqqqqqqvqqqqqqqqqqq0r58vs3glghpap9wxma98vx8znu5nx4dr6zw4ukjwnn42jg82xmxtwfs2fz4kqpuxpeh5tmzkwzgpp99qmwwazfppvw4d830cv7d2dwpy5h6r98q6dlp295wt4rcv4vkx6q90pxhrkvd8zd67tnk6xrtgq3c6q5e3v3rypfh3ajyn4e5nnr52svqdd9tvejaauj7lc0dje239fd29wr2fcr2cctaa6wcef6rsqpuzyaj2qahlxdtvwj0c66fnu8d0r076ds2l2z4emd0rzra7yh5w93w52lqe7n3985qwrk0ugyeqvqpq95m45qgesy07j96k6fezqyrzh4s2mtd3nwgqd34gdhg5esplz0428mt7efk7w0rck9jk6t5vf5qun0lutum06l9swsljnvy62qyv9h98ce473xa03u9py2kashf277n8ycze4ec9ln0d7sssvccnv7sq2w90aqrleg7sadlt9xy4ymlqqt5adkwee0g920j4qwt9ch28eqxykctu3ddanan9xwv57n6eh5wsqtkjlse7g9q83c5gaka3gsg0g63j9fl56sy9mgxzdh0ledl85a4xfmu3jnqjlfd33w87yxw00njqszg6fvxnd828hyzgul4x6d3vsctn6jxclpj7v9gjrhvwsmeas8q3r4n5vcfqaccsl2t6vvy4qrzl0qq2ae8jt8y077tnatgy386vkmdpa6h2f6gxh22q09eqptmh9x9m4y8c2t7pgg0hpdnxkj4kez3lpjq08dzp9j9dtsr4vtjxur5c0hrrkvmd3gjzsa7378559gwqunply8hh8clhljequ4tgra2s404yfesqvph2hzaf8vqmx3dd75yllnta94796jg2v4ld054g5ke5esahfwudhpcpfm6fndcmstwcz0rhhsjgq5jetw49vfsrfr0vsala3xt8jvshg46xj9vlx70gcfhanaeqyrlke5xjzc",
    },
    fee_public: {
        prover: KEY_STORE + "fee_public.prover.5515650",
        verifier: "fee_public.verifier.40ea40e",
        verifyingKey: "verifier1qygqqqqqqqqqqq9wggqqqqqqqqqtxssqqqqqqqqqxdaqqqqqqqqqpp93qqqqqqqqqrw96qqqqqqqqqqvqqqqqqqqqqqgcegdmfr5a2z7lxv5r9pym8t77stu7xmer78uzdh635u5vg2etr0chrkm2u3k3s9gj4ypk2h96uyp8y04x2x7j9e7g932uk0vx8vau03ett9atggqwxwntlq77mde6k9kt2cfgwjdzk3lcj8xusr7n4cszr2t49ghw8s3yetemp9uq2gv4jwe7d36k96rz8thx05jye0zp2r5u04c6luzys5w39klgdhgg8knsq89h2r6u8tx7h7y2j5422q7dvjj90sn0vgfakgtfh3lwl0f83g90aykdfrsmjm40xed30gnmwxhlqgccvw7sac3hrxeamencv07hu8xwm2k9l34qlujzrtfcv3vdt36tv8c4t972a0gawpaampexfyh62qvjzjmqukzg485klj79rj4tryefz9xa37z74t93590859qqscqc5jjmqjd6uwkdnlpu60tuz4ucnypmz4cem0z2urgkue2q80z7u5fwtpzku4x6yf8vlx8nvtnlpvq7ymh2pkjaaay08557t39qnaw7zggqz4gug53aq7s3rnedfg8d3mkehqfgyvrgj0xag48jnjclp33yhejanx7zcd2ukwjmc75gm4uv022qxrm5h8uyvszmlhq2863vh3c7rl6pplvrqlasngafpnfgvhn4k427k38xqjru4q4x3jcyantaw0neqp54mucvkcdcrryed7ukqlrzx63ryv6hsp63ax4gxlaw0xrw4hfgar2wdeckghzkmza24vc3jt5juqgwwag6rh9x2j8xwujagev89g25605fqye6ld5yjaannpnzmzxtw35w5aglrtmpwwf9zjaw9049ssqlxqmwfqa9t4h7e78k87gsynjhwhuj8y0fmsndmld7ke7tzq3kfsjujxry8g7az0jmrm83qxmgrqsqz8r75cj3rxdx5v9g5n8y2sv5jv2escy2q5qs3k8s6payfkzhv52shuydc",
    },
    inclusion: {
        prover: KEY_STORE + "inclusion.prover.b46b287",
        verifier: "inclusion.verifier.2fae105",
        verifyingKey: "verifier1qyyqqqqqqqqqqqzq7qqsqqqqqqqqdugpqqqqqqqqtm7syqqqqqqqpg43qvqqqqqqqzk8sqcqqqqqqqqvqqqqqqqqqqqyjtgkq7td45a5h94srp9yljcvwacqas7empws2j9lklccezgsxp58zta506lkyu6qyk0g8h4eq2ypps3rzg4kjpz7zzutgfd0qj8jw2rnfy68h5asc65tgv89e25fn02kfx002npkuyjdqj8p0urycchcqwy4j85agcdtw7f7ua2tvtq00tk4wc8cc7yqyqwesrt5n6krf0p5penhaj4gfzpefvcnqqf3hlu7qx25n4ng8txtuhyem8lwydlq3qgm8eywzj6uy76943ja58tx3acpcjw0p9c82lxv9ralqrq5z78slqx2v796nzcjmuacrar2yp4remga7qtgm0qcvejgulhp93jamuxvxj20s4ar493pp9hyww5g0prwf7qztkjzpp4nfljdwhra2022z0rnt8mkuryl8rzz8sxxsnf6twzr6pfemlu7z0jclrad92jeswwkul5pmyrwp9e4q5xsgappatw9neup7n0u3lls9cyhlujradvyze6yywdcccchu5p864ad9ahxws3pt36cq8lk49pl3kwkszr8fc3en8u6p9tst9zf6a0hwwcuc8lzx7sh4zhqjyt4umdjl9rr2yg8z875xhqdszxxdnd5nrrv724seqrqs8u3grw85hc2qafl4glrt9s9r49a9zrp8v2akql3l7f00v0wk82el5te5qdtdf2n4a8lgzzth7fyvtxxqse6pye5je2p67l9mnv784ay5t7c4z9u59q5m75r3j7nck9a4e2pyqququmk0pa64xfcyt5kj94730awdad7ch6f22lrr4vv7l0xxsmndhzjnxttk6gw59gt3950xc5gqzsqc5zsj56c0fqpsg8aevq7cl4tj7gj8exmtlq5savkclan8kqr4554m99c8wzwf4u9r4xapktcqttcq33r2dg48kk374rzx9m98prt637cvv0j9mru779cwxytgzndutlx3napjj",
    },
    join: {
        prover: KEY_STORE + "join.prover.30895cc",
        verifier: "join.verifier.5cb1e62",
        verifyingKey: "verifier1qygqqqqqqqqqqqqqeuqqqqqqqqqz3ncqqqqqqqqqgvkqzqqqqqqqq590qyqqqqqqqzwn5qgqqqqqqqqvqqqqqqqqqqqpkgztrguz0x8mpfjhsnmqqsnwl764jw73ll0nxcg7pzt59lpd7zsjlmrprw3w6r7npmx4ck4kz3qq7mslfg4rhc9anmgza3dvms2qjhz0hatprzdgmsk3usxkttpep7wej007nzrhzzdmcca2603z4f4cp80q7drqtqw3quvqu5z4nnzspqca272csmxknz9mlwu4u6f9u2zha5rwjgv2hp0l8dlc7aa32dggq9afa5hkqmwnptqmhavy050nf48ndcl6vmjlm95c582wqyws2z5fckxsw6stcxdxxhj7v26padsumqpk58n2f6fejx3k80j2shqa642hulj3sx08ywtxg506n8dnm6nu2ltp4z5apf6wtam9kzaadackjjq6vnahqmqlkuncyslzeml246ajhy5yldyc20p9pf84gn6zdwlq79azygr4fwtvra632w333kh2e3sq4hwtk967gz8zxtsgph0nlncfhqz6wmt5cccd64qwpezp2yuglkrp7jmk4ggkefa5aw09lvhe646gpt0lkjn984uqg6r46a8q3u9vcezmtnq090xkgq0euqtkjrgjks6cxqz9hqw339k8jzepd9nxlhu7sqtv0n0uvz8p3e8wxc784jsvpf4dp92kndr2e6n9p85q8ty4z93l0fn4k7wv6neqkj9y6drya0284qv98y4lthmredwtdlm7p2489etmf473zehyhgpgmu094h97dcyzj22uzwvvayxfjlrv4qlnag2zgcqlma4j7cte6uhsfc98kf54jneuqktsmsacz7gftk9s0cunkevaamkcrt0e086j9lf9vd8eqvkn6esqfsfpjxk4lq94a5mqxgg0eazejt2wtda86l7hj2zxn9k5cy65jp6e97yp8ahakzf6vm0z53te7x9srqeupscxgx8vxla4rqse8srw9ypv3h4q902szlneeuuh4rm46rjnltvt9k",
    },
    split: {
        prover: KEY_STORE + "split.prover.a9784b9",
        verifier: "split.verifier.38392d9",
        verifyingKey: "verifier1qygqqqqqqqqqqq8qecqqqqqqqqqqnncqqqqqqqqqr4qqzqqqqqqqpnx4qyqqqqqqqqln7qgqqqqqqqqvqqqqqqqqqqqx4tv4dx9ct4hgwe0cgmqrljgeg88zfepv9gk26d4m2tggqwrj30tgpfatc9654hdggyvymxedz6qqqx3upvdhtl2ux9cvyl3qwtsj5hnqwjpq4xvdvwxggnureuqmhsyegt3k7m3nffxj9zuvkmccmfnczu5y8rd735uwlwa84qq7e092nnsrdyryap6tusdedfwsnkqfllv34l6ny0mlqdrv33jeghluhp5zs88fuc3209j958zh5fuhln6rdleyuk20c7lk4uv79ngx2uh44ed2elvf8ltcj033gg0skmrc5g9tcqrcax5nzyxpafv326m7c8lnz98gks6wlgnyk8qk7qzc4ufp236yuzx94ug8kfsj0tjnvqx6n5ls4yq27fgydj0f4ac6xhjtrqcfa675d4ufs9qdfguexv30rheew7n2n09sng7w5g5mz26dmmmsxnva0luqt2qe9h9jqmn7ajeqadqarvggquz72n94dd5dvpprppjl99lqgzavlp3nph7d4jwzp6txnhxqcecsrt0h5w95v7l8e3qtq274k8427nzl5j3ywy59ssqeagfedxpy3kaytlqmuevluk70tw50drkwaddaspdmfk7ct6s8vurtjg67atnr277xydursaj4trngkndqfhh89tmknmtukcuev77uxhsu3xv2rcr6dqw3mdy7qf6a72ltwkk5g75l4cjxc8ktxwnklcw0nwupqry4xayka9fqngyq9prc022sztk64fqr22qxcv7vtzf5dfhy3j4alqx2vnq6gzhgn8nx7trw8s09txmz6j7jm8v6fwn00evqt46ak5ykd46yfzgpmxuuxut8vxvftzfpq40sl6zhy63c5zusdstaeal9d2rcfpw9pr2pegr2cj307hapacguraxcfrgcq5q2evj9afe7cznp3c99vt44jtngr0jzfn0l6m8xl0aa3cvc75d3xge3sg",
    },
    transfer_private: {
        prover: KEY_STORE + "transfer_private.prover.deb77db",
        verifier: "transfer_private.verifier.3088e6d",
        verifyingKey: "verifier1qygqqqqqqqqqqq9n65qqqqqqqqqde4gqqqqqqqqqcfvqzqqqqqqqppl7qyqqqqqqqzuyvqgqqqqqqqqvqqqqqqqqqqqqcqaunljwmh56k2t4sa3ssex2xkw3s9sh30uyfnjq4yeg38kgfex6uferudqklkssu429k2lplcvq28f966yhpcx4jzdan698fzhpv02luxdd4dd6lfux5u5j9nvz2a4zk5yd6zegztlg0rvll27tly0gzx8nqr43yv4jnmspt6j7kcsr8fsvpux9wk9lgt4h386fjmgs2jna7r2ty5fked5kzacw8ay22wq4qp8850903z200suwyjfs3gn6wg08nl3nkvfdkn68fp45dm4hl5xejejdk3d2gxkeju354mhqna34sq2dk92eau0tw8h30plcy933zw6vskst42qkhg6tav9uqzx0f6kluee45ecamgy4sc833lzv3ke6kkq9ypf5tlsndqa2vv3xssgwyhz6awjvprrpzgs9hyehtrjp7c68ecj3h250q9mcf05cnfmrpxmdcgupzelp46jq6kvggkp97pc046fjac6m2nl2s2e63f6lxumcwvey03t2npryvnwmr486m67g4ajlx9mgpvmgv27qrf5tlq7nlpe6ekvnq53rtzwxa6spxpjppc94ntselrdw8fuyx2gevazqrx5dayls52xaszkm3xe365azkxq4n3dmps3mlmk494kxgx435wklfzneu5n8gqjtfh79gkhd7h58avjjju3j4k6edqwxnj8mf3m5qv65qkv2hllshe688x23qs9ttv2fspn93lqzutlyn9gs67rqv0zj8lz274jd43vaxzqv2yaxg9kn9fewancsdmsauw4y688ywgjqj2dekehun27qt5ew6kgl6u4uauju6trpuusk3lvjdxvp8u536pcmm7vzzgelc0cj845933ehsul7e5adr0fspgl76gfet7l5xw896705gf3qymc4j3htxwhgzavzmr0umnfqdd5gaft5r5wgax0kewjguazy0kue2277gpz0hqgvpx0a0y",
    },
    transfer_private_to_public: {
        prover: KEY_STORE + "transfer_private_to_public.prover.7ca1421",
        verifier: "transfer_private_to_public.verifier.37dd126",
        verifyingKey: "verifier1qygqqqqqqqqqqqq45vqqqqqqqqqr9gcqqqqqqqqqdqpszqqqqqqqq6tmqyqqqqqqqz302qqqqqqqqqqvqqqqqqqqqqqdr77uvehrw3k8a2ajgeecvtzhfs7e0jarvq699mgme43pz60ez57jm0drlc32arllag3s43xcgvqpezqaxl406uz8eedpe36rxferaxs5sz7w7kxvcj2xys26x24gu4jzjt2fq8s4cjkntp95qs28txjsqsz9a8vqsypzld5v0296aqdt33vzw6ngfacpvtu8tg0ppuvhpkmha7zvcv5v55ekn64sj4heqqsvqplcrkpncg8km3em4grmwp7dfveggayzdu39phkyfrqlxm96mrxzhpmca76f2995j7s787ulcm7epqtvr2wg8fhl7w8shyz5vh203zvmtt69w8hn0349tlx78g0enafs7vq7cfk9tmqpf734e4tzkp83s2qw7fqx4n2chh5ql7jy7dc9raxmzzqurnkctlq0ul38tr9mrw3hqrez6jt5tn74f20x4ya7aygp79sq4jh6gftu7wjrm6dmndm79ynr7vatxckar0tawsr7h08jvacd24pz5sl636vg8dhvedhc3q8ym3rcqjhs2dttxeqsp55kt5srx6qdt9v4ge7mqkptthzz3zjsg8ftd209w590ngn5xmpg606e0w3d8h9cszc7hj6swtk9xucm9vsz8kvcmcz2ny5mrv6wyy7nzjaq5rvsxsf4g9lmaa5dh8jvrhd78wynfaehcqvn7v93c6hqz7s8znzfcckgygetl7anv0a4g2x9tgey9qzvuy9zvjh0mcd3zcexa929cs65hvtz56qdwvfcevx2vfmcgwp5qm4xzny66z4xplm5ajr6hjvt55jnw8mcpf8unj3qk9z2w9xrtal9ndnru2upcju0yq3cyzqg7sejuqclc4wwu2wn7ceaxswmt5t4cekjrfg7zgxwng8pu0l988lk47zg44asr75szg6zn4k7sjqf393zr27t9e29plyn29r45l6j47765f0r9tw489tsgwqgu2",
    },
    transfer_public: {
        prover: KEY_STORE + "transfer_public.prover.2941ad3",
        verifier: "transfer_public.verifier.ed98d35",
        verifyingKey: "verifier1qygqqqqqqqqqqq9hggqqqqqqqqqtsssqqqqqqqqqk4aqqqqqqqqqpz9nqqqqqqqqqr596qqqqqqqqqqvqqqqqqqqqqqpf55jjwuf23j9etvgw8ewld2xx6u9as0za0w993q5374fklcucxaqmn8mdeyltg9w6x775d3mxcyqs9a0vw2mzta52usy60c9n3dht98pnek76sg2s7vnjvu3dpyhlyzaqxya3jjt0grk8jrc6z0xcajsrlsy74sgzfl5g2zpxv585aavv44e28q2fmhnw8gw4nyfg9trfn3d8d39yuze6rqnx70aqfqumdgzqqrad6kmnm6nrkww2l4xu0gt4t467m24hk60ra9lyd3jkzs6v8l57nmupn0dz6t0k77lutj68z4vqqruuqwuh72gc0xl9x8c6d0ufuffdfp63x82xe8r65a25qhx2d0n44ve6m4fln2m9ck8tslh3kqa3uqn6cg53l8x4yv44a00kpy5nprz0kmf5xm62xkkny4vua85fanzq6u9zsqg7mm3yq3p5s22m0xd54cq98um775vscxfnsf54gzryqkt253v0pynrllxr0cymt6w9l05trnlw7egg7f4ld8d5jdzxky82m6sq025a96ewr9vmdnyhve3724e6hdn60yrme4jagdtjxavxhtmm2zn86aq0v5t0zgdesu3m79euw3sqyqzm93v8etujswag742nc6zugwtccmtxxfllxx7vzqhygzvqk0ujgft2hhltetg2w5n73dhz9ufnqgdqmqe00eq08amtpxs5kl3c5hdutgq9zmfac4ke08frt0e09vrf0y6kdh3z3hq08d88gp7n8c22vqdr6sqyg3uxspk0x77rrr43q284nj62ll7dufxwq4hpx0qw2dgsayw9wzjngh0l00j9kah0mvx25yqmumjessw3k7j4g8esk6u33wk3344x0nfha9cu84lnp649jhdmq7rwxumel7xq6nx9syzs4tn7ncgqrvk83lza285cz6r3gf3j79n4c4pmtn42vsjj2t3f57ceha4kvupct6ss4",
    },
    transfer_public_to_private: {
        prover: KEY_STORE + "transfer_public_to_private.prover.67f57fc",
        verifier: "transfer_public_to_private.verifier.f2aaeee",
        verifyingKey: "verifier1qygqqqqqqqqqqqqswsqqqqqqqqqpuaqqqqqqqqqqdm9sqqqqqqqqp2pwqyqqqqqqqrp26qqqqqqqqqqvqqqqqqqqqqqdmukmllrvx44ed40um3qe2yq58lmvajsqucq2x8egmls6x8jyeusvn6pzcph4hw25nrsr5p6g60ypayclhdergx3zx4x67unesl33fxv6xkm5tzf5k3ehdf67faut52l5u4npsq0zqlh5w2tk02jaj8hcq4z6fypqg9yh83xwh6z6xcvx3vqpu08whfuvcefk30xg5z7xu3mqleshpmzu6060aucm90jjtfgrsqau7shuwwtgghzgcaxj2ruje6y5jag6jy5nrvgxuyjdawg9t29upzv5qzz2zl6gmpmlzum58du4hqqhnrfc2uvx45c8zp5xa68pqlvhzexmucsujwuvff6f9jrxpg7jtretg9er7n0qsv34jtjjrgpqqzqq50qa7vljmn20lsfu2zc3nnzntrcr5wt880ywdykya5jv23cywlc4nyvdcqsc9wxly77falzt79cq9wuls5euc7d8thyqhnuehnjztfshr5syks9zra6yrt7hk6rvnv5d9jypehqkfhz2m0avcwksaxgqpcgw72pg7edz4fdfp4tfhynzarav9yrjm09gu2wgfcde0cq5kd4uq0znmen5jeu0wmfpden3c50rqpjjdwgyjrsnffzfjnswa7dcacz8dgk7h48q0xtz442hvalaeveyxm86e9t5f437krv5tjrenzr4vqgzm8uag6azkty05y7ngfpwzkra9ytqqhfuvp5h2eush3m4y2cxu3vc77pzc7wmesdhhhtqzhxc0qqujxpatu4p56u3hh4rnzyj7pqnqrc0s2h93vsjnj7uax633d0tk266mls44rwthp7c4y9lxy5naqvqqr8cy3hj46zgjlvkk7arh7vet60gpqz68ynrawxqacrry0k7tu3u8xtkp6xeg5jeumu4g7uaw9mcr7u9qxy9tjqma4r8awswqg9k8306f3u408z3z937pmhtu9gj68qp8h0zpz",
    },
};
const PRIVATE_TRANSFER_TYPES = new Set([
    "transfer_private",
    "private",
    "transferPrivate",
    "transfer_private_to_public",
    "privateToPublic",
    "transferPrivateToPublic",
]);
const VALID_TRANSFER_TYPES = new Set([
    "transfer_private",
    "private",
    "transferPrivate",
    "transfer_private_to_public",
    "privateToPublic",
    "transferPrivateToPublic",
    "transfer_public",
    "public",
    "transferPublic",
    "transfer_public_to_private",
    "publicToPrivate",
    "transferPublicToPrivate",
]);
const PRIVATE_TRANSFER = new Set([
    "private",
    "transfer_private",
    "transferPrivate",
]);
const PRIVATE_TO_PUBLIC_TRANSFER = new Set([
    "private_to_public",
    "privateToPublic",
    "transfer_private_to_public",
    "transferPrivateToPublic",
]);
const PUBLIC_TRANSFER = new Set([
    "public",
    "transfer_public",
    "transferPublic",
]);
const PUBLIC_TO_PRIVATE_TRANSFER = new Set([
    "public_to_private",
    "publicToPrivate",
    "transfer_public_to_private",
    "transferPublicToPrivate",
]);
function logAndThrow(message) {
    console.error(message);
    throw message;
}
// @TODO: This function is no longer needed, remove it.
async function initializeWasm() {
    console.warn("initializeWasm is deprecated, you no longer need to use it");
}

export { Account, AleoKeyProvider, AleoKeyProviderParams, AleoNetworkClient, BlockHeightSearch, CREDITS_PROGRAM_KEYS, KEY_STORE, NetworkRecordProvider, PRIVATE_TO_PUBLIC_TRANSFER, PRIVATE_TRANSFER, PRIVATE_TRANSFER_TYPES, PUBLIC_TO_PRIVATE_TRANSFER, PUBLIC_TRANSFER, ProgramManager, VALID_TRANSFER_TYPES, createAleoWorker, initializeWasm, logAndThrow };
//# sourceMappingURL=index.js.map
